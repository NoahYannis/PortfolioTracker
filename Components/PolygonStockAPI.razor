@using PortfolioTracker.Other;
@using PortfolioTracker.Services.GetStockInfoService;

@inject IGetStockInfoService GetStockInfoService

<div>
    <label for="stockTicker">Enter a stock ticker: </label>
    <InputText id="stockTicker" @bind-Value="Ticker" />
</div>
<div>
    <button @onclick='async () => CurrentStock = await ReturnStockFromApiCall(Ticker)'>
        Confirm
    </button>

    @if (!string.IsNullOrEmpty(CurrentStock.Ticker))
    {
        <br/><br/>
        <p>Pre Market: $@CurrentStock.PreMarket </p>
        <p>After Hours: $@CurrentStock.AfterHours</p>
        <p>Open: $@CurrentStock.Open</p>
        <p>Close: $@CurrentStock.Close</p>
        <p>Low: $@CurrentStock.Low</p>
        <p>High: $@CurrentStock.High</p>
    }
    else
    {
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <br/><br/>
            <p>@ErrorMessage</p>
        }
        
    }

</div>


@code {

    /// <summary>
    /// The ticker symbol entered by the user inside the input text field.
    /// </summary>
    public string Ticker { get; set; } = string.Empty;

    /// <summary>
    /// The current stock requested by the user.
    /// </summary>
    public Stock CurrentStock { get; set; } = new();

    /// <summary>
    /// Error message that is displayed after an unsuccessful API call.
    /// </summary>
    public string ErrorMessage { get; set; } = string.Empty;

    /// <summary>
    /// Returns the stock entered by the user if the API call is successful, alternatively an error message is displayed.
    /// </summary>
    /// <param name="tickerSymbol"></param>
    /// <returns>The stock entered by the user</returns>
    public async Task<Stock> ReturnStockFromApiCall(string tickerSymbol)
    {
        var response = GetStockInfoService.GetStockData(Ticker.ToUpper());
        var stockData = await response;

        if (stockData != null && !stockData.Success)
        {
            ErrorMessage = "Error: " + stockData.Message;
        }

        CurrentStock = stockData?.Data;

        return CurrentStock ?? new Stock();
    }
}

