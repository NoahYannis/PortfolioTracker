@using PortfolioTracker.Other;
@using PortfolioTracker.Services.PortfolioService;

@inject IPortfolioService PortfolioService

<div>
    <EditForm Model="@StockToAdd" OnValidSubmit='async() => await AddStock(StockToAdd)'>
        <DataAnnotationsValidator />

        <label for="stockTicker">Stock Ticker: </label>
        <InputText id="stockTicker" @bind-Value="StockToAdd.Ticker" />
        <ValidationMessage For="() => StockToAdd.Ticker" />
        <br /><br />

        <label for="sharesOwned">Shares Owned: </label>
        <InputNumber id="sharesOwned" @bind-Value="StockToAdd.SharesOwned" min="0"/>
        <ValidationMessage For="() => StockToAdd.SharesOwned" />
        <br /><br />

        <label for="positionSize">Position Size ($): </label>
        <InputNumber id="positionSize" @bind-Value="StockToAdd.PositionSize" min="0" />
        <ValidationMessage For="() => StockToAdd.PositionSize" />
        <br /><br />

        <label for="buyinPrice">Buy In Price ($): </label>
        <InputNumber id="buyinPrice" @bind-Value="StockToAdd.BuyInPrice" min="0" />
        <ValidationMessage For="() => StockToAdd.BuyInPrice"/>
        <br /><br />

        <label for="industry">Stock Industry: </label>
        <InputSelect id="industry" @bind-Value="StockToAdd.Industry">
            @foreach (Industry industry in Enum.GetValues(typeof(Industry)))
            {
                <option>@GetDisplayValue(industry)</option>
            }
        </InputSelect>
        <br /><br />

        <label for="dividendYield">Dividend Yield % (optional): </label>
        <InputNumber id="dividendYield" @bind-Value="StockToAdd.DividendYield" min="0" />
        <ValidationMessage For="() => StockToAdd.DividendYield" />
        <br /><br />

        <button type="submit">Add new stock</button>
        <br /><br />
    </EditForm>
</div>

@foreach (Stock stock in PortfolioStocks)
{
    <p>Stock Ticker: @stock.Ticker</p>
    <p>Shares Owned: @stock.SharesOwned</p>
    <p>Position Size: $@stock.PositionSize</p>
    <p>Buy In Price: $@stock.BuyInPrice</p>
    <p>Industry: @stock.Industry</p>
    @if (stock.DividendYield != null && stock.DividendYield > 0)
    {
    <p>Dividend Yield: @stock.DividendYield %</p>
    }
    else
    {
    <p>Dividend Yield: - </p>
    }
}

@code {


    public List<Stock> PortfolioStocks { get; set; } = new();
    Stock StockToAdd { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        PortfolioStocks = await PortfolioService.GetStocks();
    }

    public async Task AddStock(Stock stock)
    {
        Stock newStock = new() 
        {
            Ticker = stock.Ticker,
            SharesOwned = stock.SharesOwned,
            PositionSize = stock.PositionSize,
            BuyInPrice = stock.BuyInPrice,
            Industry = stock.Industry,
            DividendYield = stock.DividendYield
        };

        await PortfolioService.AddStock(newStock);
        await ResetInputFields();
    }

    public static string GetDisplayValue(Industry value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (EnumDisplayText)Attribute.GetCustomAttribute(field, typeof(EnumDisplayText));
        return attribute != null ? attribute.Text : value.ToString();
    }

    public async Task ResetInputFields()
    {
        await Task.Run(() =>
        {
            StockToAdd.Ticker = string.Empty;
            StockToAdd.SharesOwned = null;
            StockToAdd.PositionSize = null;
            StockToAdd.BuyInPrice = null;
            StockToAdd.Industry = Industry.Technology;
            StockToAdd.DividendYield = null;
        });
    }

}
