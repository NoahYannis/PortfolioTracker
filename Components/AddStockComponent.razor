@using PortfolioTrackerClient.Services.PortfolioService;
@using PortfolioTrackerShared.Models;
@using PortfolioTrackerShared.Other;

@inject IPortfolioService PortfolioService

<div>
    <EditForm Model="@StockToAdd" OnValidSubmit='async() => await AddStock(StockToAdd)'>
        <DataAnnotationsValidator />

        <label for="stockTicker">Stock Ticker: </label>
        <InputText id="stockTicker" @bind-Value="StockToAdd.Ticker" />
        <ValidationMessage For="() => StockToAdd.Ticker" />
        <br /><br />

        <label for="sharesOwned">Shares Owned: </label>
        <InputNumber id="sharesOwned" @bind-Value="StockToAdd.SharesOwned" min="0" />
        <ValidationMessage For="() => StockToAdd.SharesOwned" />
        <br /><br />

        <label for="positionSize">Position Size ($): </label>
        <InputNumber id="positionSize" @bind-Value="StockToAdd.PositionSize" min="0" />
        <ValidationMessage For="() => StockToAdd.PositionSize" />
        <br /><br />

        <label for="buyinPrice">Buy In Price ($): </label>
        <InputNumber id="buyinPrice" @bind-Value="StockToAdd.BuyInPrice" min="0" />
        <ValidationMessage For="() => StockToAdd.BuyInPrice" />
        <br /><br />

        <label for="industry">Stock Industry: </label>
        <InputSelect id="industry" @bind-Value="StockToAdd.Industry">
            @foreach (Industry industry in Enum.GetValues(typeof(Industry)))
            {
                <option>@GetDisplayValue(industry)</option>
            }
        </InputSelect>
        <br /><br />

        <label for="dividendYield">Dividend Yield % (optional): </label>
        <InputNumber id="dividendYield" @bind-Value="StockToAdd.DividendYield" min="0" />
        <ValidationMessage For="() => StockToAdd.DividendYield" />
        <br /><br />

        <button type="submit">Add new stock</button>
        <br /><br />
    </EditForm>
</div>

@if (ShowResultMessage)
{
    <p>
        @AddStockResultMessage
    </p>
}

@code {

    private Stock _stockToAdd = new Stock();

    private Stock StockToAdd 
    {
        get =>  _stockToAdd is not null ? _stockToAdd : new Stock();
        set => _stockToAdd = value;
    }


    private string AddStockResultMessage { get; set; } = string.Empty;

    private bool _showResultMessage;

    private bool ShowResultMessage
    {
        get => _showResultMessage;
        set
        {
            if (_showResultMessage != value)
            {
                _showResultMessage = value;
                StateHasChanged();
            }
        }
    }

    public async Task AddStock(Stock stock)
    {
        AddStockResultMessage = await PortfolioService.AddStock(stock) ? 
        $"Added {stock.Ticker} to portfolio!" : $"Warning: Portfolio already contains {stock.Ticker}!";
        await DisplayResultMessage();
        StockToAdd = new Stock();
    }

    private async Task DisplayResultMessage()
    {
        // Display result message.
        ShowResultMessage = true;

        // Display it for 2 seconds.
        await Task.Delay(2000);

        // Hide message.
        ShowResultMessage = false;
    }

    public static string GetDisplayValue(Industry value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (EnumDisplayText)Attribute.GetCustomAttribute(field, typeof(EnumDisplayText));
        return attribute != null ? attribute.Text : value.ToString();
    }

}