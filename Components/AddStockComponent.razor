@using PortfolioTracker.Other;
@using PortfolioTracker.Services.PortfolioService;

@inject IPortfolioService PortfolioService

<div>
    <label for="stockTicker">Stock Ticker: </label>
    <InputText id="stockTicker" @bind-Value="StockToAdd.Ticker" />
    <br /><br />
    <label for="sharesOwned">Shares Owned: </label>
    <InputNumber id="sharesOwned" @bind-Value="StockToAdd.SharesOwned" />
    <br /><br />
    <label for="positionSize">Position Size ($): </label>
    <InputNumber id="positionSize" @bind-Value="StockToAdd.PositionSize" />
    <br /><br />
    <label for="buyinPrice">Buy In Price ($): </label>
    <InputNumber id="buyinPrice" @bind-Value="StockToAdd.BuyInPrice" />
    <br /><br />
    <label for="industry">Stock Industry: </label>
    <InputSelect id="industry" @bind-Value="StockToAdd.Industry">
        @foreach (Industry industry in Enum.GetValues(typeof(Industry)))
        {
            <option>@GetDisplayValue(industry)</option>
        }
    </InputSelect>
    <br /><br />
    <label for="dividendYield">Dividend Yield % (optional): </label>
    <InputNumber id="dividendYield" @bind-Value="StockToAdd.DividendYield" />
    <br /><br />
</div>

@foreach (Stock stock in PortfolioStocks)
{
    <p>Name: @stock.Ticker</p>
}
<button @onclick='async() => await AddStock(StockToAdd)'>Add new stock</button>

@code {


    public List<Stock> PortfolioStocks { get; set; } = new();
    Stock StockToAdd { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        PortfolioStocks = await PortfolioService.GetStocks();
    }


    public async Task AddStock(Stock stock)
    {
        Stock newStock = new() { Ticker = stock.Ticker };
        await PortfolioService.AddStock(newStock);
        StateHasChanged();
    }

    public static string GetDisplayValue(Industry value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (EnumDisplayText)Attribute.GetCustomAttribute(field, typeof(EnumDisplayText));
        return attribute != null ? attribute.Text : value.ToString();
    }

}
