@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor

@using PortfolioTracker.Other;
@using PortfolioTracker.Services.PortfolioService;
@using System.Drawing;

@inject IPortfolioService PortfolioService


<Chart Config="_config"/>


<UpdateStockComponent StockToUpdate="PortfolioStocks.FirstOrDefault()">
</UpdateStockComponent>

@code {

    private PieConfig _config = new();
    private List<Stock> PortfolioStocks { get; set; } = new();
    private List<string> BackgroundColors { get; set; } = new List<string>();
    private PieDataset<decimal?> Dataset { get; set; } = new PieDataset<decimal?>();
    private Random random = new Random();

    protected override async void OnInitialized()
    {
        PortfolioService.PortfolioChanged += UpdatePieChart;

        _config = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Your Portfolio",
                    }
                }
            };

        PortfolioStocks = await PortfolioService.GetStocks();

        // For each stock inside the portfolio display its ticker and set the background to a random color
        foreach (Stock stock in PortfolioStocks)
        {
            _config.Data.Labels.Add(stock.Ticker);
            Dataset.Add(stock.PositionSize);

            Color randomColor = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
            string colorHex = ColorUtil.ColorHexString(randomColor.R, randomColor.G, randomColor.B);
            BackgroundColors.Add(colorHex);
        }

        Dataset.BackgroundColor = BackgroundColors.ToArray();
        _config.Data.Datasets.Add(Dataset);
    }

    /// <summary>
    /// The portfolio has changed, the pie chart must be rerendered.
    /// </summary>
    public void UpdatePieChart(object sender, PortfolioChangedArgs p)
    {
        ClearPieChart();

        foreach (Stock stock in p.UpdatedPortfolio)
        {
            _config.Data.Labels.Add(stock.Ticker);
            Dataset.Add(stock.PositionSize);
            Color randomColor = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
            string colorHex = ColorUtil.ColorHexString(randomColor.R, randomColor.G, randomColor.B);
            BackgroundColors.Add(colorHex);
        }

        Dataset.BackgroundColor = BackgroundColors.ToArray();
        _config.Data.Datasets.Add(Dataset);
    }


    /// <summary>
    /// The portfolio has changed and the pie chart must be rerendered
    /// </summary>
    public void ClearPieChart()
    {
        _config.Data.Labels.Clear();
        _config.Data.Datasets.Clear();
        Dataset.Clear();

        // Tell Blazor to update the UI
        StateHasChanged();
    }


    public void Dispose()
    {
        PortfolioService.PortfolioChanged -= UpdatePieChart;
    }
}
