@using ChartJs.Blazor.PieChart
@using PortfolioTracker.Other;
@using PortfolioTracker.Services.PortfolioService;
@using System.Drawing;

@inject IPortfolioService PortfolioService


<Chart Config="_config" />

<button @onclick="StateHasChanged">Add Stock </button>

@code {

    private PieConfig _config = new();
    private List<Stock> PortfolioStocks { get; set; } = new();
    private List<string> BackgroundColors { get; set; } = new List<string>();
    private PieDataset<decimal?> Dataset { get; set; } = new PieDataset<decimal?>();
    public Random random = new Random();

    protected override async void OnInitialized()
    {
        PortfolioStocks = await PortfolioService.GetStocks();
        PortfolioService.PortfolioChanged += UpdatePieChart;

        _config = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Your Portfolio",
                    }
                }
            };

        // Simulating the portfolio for now
        PortfolioStocks = new()
        {
          new Stock { Ticker = "T", PositionSize = 8},
          new Stock { Ticker = "E", PositionSize = 3},
          new Stock { Ticker = "S", PositionSize = 6},
          new Stock { Ticker = "T", PositionSize = 1},
        };


        // For each stock inside the portfolio display its ticker and set the background to a random color
        foreach (Stock stock in PortfolioStocks)
        {
            _config.Data.Labels.Add(stock.Ticker);
            Dataset.Add(stock.PositionSize);

            Color randomColor = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
            string colorHex = ColorUtil.ColorHexString(randomColor.R, randomColor.G, randomColor.B);
            BackgroundColors.Add(colorHex);
        }

        Dataset.BackgroundColor = BackgroundColors.ToArray();
        _config.Data.Datasets.Add(Dataset);
    }


    public void UpdatePieChart(object sender, PortfolioChangedArgs p)
    {
        foreach (Stock stock in p.UpdatedPortfolio)
        {
            _config.Data.Labels.Add(stock.Ticker);
            Dataset.Add(stock.PositionSize);
            Color randomColor = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
            string colorHex = ColorUtil.ColorHexString(randomColor.R, randomColor.G, randomColor.B);
            BackgroundColors.Add(colorHex);
        }

        Dataset.BackgroundColor = BackgroundColors.ToArray();
        _config.Data.Datasets.Add(Dataset);
        }
    }
}