@using PortfolioTracker.Other;
@using PortfolioTracker.Services.PortfolioService;
@using Blazored;
@using Blazored.Modal;
@using Blazored.Modal.Services;

@inject IPortfolioService PortfolioService
@inject IModalService ModalService

<div>
    <EditForm Model="@StockToUpdate" OnValidSubmit='async() => await UpdateStock(StockToUpdate)'>
        <DataAnnotationsValidator />

        <label for="stockTicker">Stock Ticker: </label>
        <InputText id="stockTicker" @bind-Value="StockToUpdate.Ticker" />
        <ValidationMessage For="() => StockToUpdate.Ticker" />
        <br /><br />

        <label for="sharesOwned">Shares Owned: </label>
        <InputNumber id="sharesOwned" @bind-Value="StockToUpdate.SharesOwned" min="0" />
        <ValidationMessage For="() => StockToUpdate.SharesOwned" />
        <br /><br />

        <label for="positionSize">Position Size ($): </label>
        <InputNumber id="positionSize" @bind-Value="StockToUpdate.PositionSize" min="0" />
        <ValidationMessage For="() => StockToUpdate.PositionSize" />
        <br /><br />

        <label for="buyinPrice">Buy In Price ($): </label>
        <InputNumber id="buyinPrice" @bind-Value="StockToUpdate.BuyInPrice" min="0" />
        <ValidationMessage For="() => StockToUpdate.BuyInPrice" />
        <br /><br />

        <label for="industry">Stock Industry: </label>
        <InputSelect id="industry" @bind-Value="StockToUpdate.Industry">
            @foreach (Industry industry in Enum.GetValues(typeof(Industry)))
            {
                <option>@GetDisplayValue(industry)</option>
            }
        </InputSelect>
        <br /><br />

        <label for="dividendYield">Dividend Yield % (optional): </label>
        <InputNumber id="dividendYield" @bind-Value="StockToUpdate.DividendYield" min="0" />
        <ValidationMessage For="() => StockToUpdate.DividendYield" />
        <br /><br />

        <button class="btn-primary" type="submit">Update</button>
        <button class="btn-danger" type="button" style="margin-left: 10px" @onclick="async() => await ConfirmDelete()">Delete</button>
        <br /><br />
    </EditForm>
    <button @onclick="@(() => Modal.Show<SurveyPrompt>("My Movies"))">View Movies</button>
</div

<BlazoredModal/>

@if (ShowResultMessage)
{
    <p>
        @UpdateResultMessage
    </p>
}


@code {

    [CascadingParameter] IModalService Modal { get; set; } = default!;

    private Stock _stockToUpdate;

    [Parameter]
    public Stock StockToUpdate
    {
        get => _stockToUpdate is not null ? _stockToUpdate : new Stock();
        set => _stockToUpdate = value;
    }

    private string UpdateResultMessage { get; set; } = string.Empty;

    private bool _showResultMessage;

    public bool ShowResultMessage
    {
        get => _showResultMessage;
        set
        {
            if (_showResultMessage != value)
            {
                _showResultMessage = value;
                StateHasChanged();
            }
        }
    }


    private async Task UpdateStock(Stock stock)
    {
        UpdateResultMessage = await PortfolioService.UpdateStock(stock) ? "Update successful" : "Update failed";
        await DisplayResultMessage();
    }

    private async Task<bool> ConfirmDelete()
    {
        // Test

        var conFirmModal = ModalService.Show<UpdateStockComponent>("Test");
        var modalResult = await conFirmModal.Result;

        if (!modalResult.Cancelled)
        {
                    await PortfolioService.DeleteStock(StockToUpdate.Ticker);

        }

        return false;
    }

    private async Task DeleteStock()
    {
        if(await ConfirmDelete())
        await PortfolioService.DeleteStock(StockToUpdate.Ticker);
    }

    private async Task DisplayResultMessage()
    {
        // Display result message.
        ShowResultMessage = true;

        // Display it for 2 seconds.
        await Task.Delay(2000);

        // Hide message.
        ShowResultMessage = false;
    }

    private static string GetDisplayValue(Industry value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (EnumDisplayText)Attribute.GetCustomAttribute(field, typeof(EnumDisplayText));
        return attribute != null ? attribute.Text : value.ToString();
    }
}

