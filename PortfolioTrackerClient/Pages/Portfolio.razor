@page "/portfolio"

@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@using PortfolioTrackerClient.Components
@using PortfolioTrackerClient.Services.AuthService;
@using PortfolioTrackerShared.Models.UserModels;

@inject IAuthService AuthService
@inject IPortfolioService PortfolioService
@inject IStringLocalizer<Resource> Localizer
@attribute [Authorize]

<CascadingAuthenticationState>
    <AuthorizeView>
        <h3>Hi @context.User.Identity.Name. You're logged in with <i>@context.User.Claims.ElementAt(2).Value</i></h3>
    </AuthorizeView>
</CascadingAuthenticationState>


<h3>Portfolio</h3>

@* Ensure PortfolioOwner is initialized before rendering the pie chart *@
@if (PortfolioOwner.UserId != 0)
{
    <PortfolioPieChart PortfolioOwner="@PortfolioOwner" />
    <button @onclick="OpenModal">@Localizer["AddNewStock"]</button>
}

@code {

    private User PortfolioOwner { get; set; } = new();

    // AddStock modal
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        PortfolioOwner = await AuthService.GetPortfolioOwner();
        await PortfolioService.InitializePortfolioAsync(PortfolioOwner.UserId);
    }

    /// <summary>
    /// Shows the AddStock modal
    /// </summary>
    /// <returns>Whether a stock should be added or not</returns>
    private void OpenModal()
    {
        Modal.Show<AddStockComponent>(Localizer["AddNewStock"], new ModalParameters { { "PortfolioOwner", PortfolioOwner } });
    }
}
