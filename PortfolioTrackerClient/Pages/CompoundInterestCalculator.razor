@page "/compound"
@using CompoundInterestCalc;

<h3>CompoundInterestCalculator</h3>
<br />
<br />

<div>
    <EditForm Model="@CalcModel" OnValidSubmit="CalculateCompoundInterest">
        <DataAnnotationsValidator />

        <div class="input-element">
            <label for="startingSum">Starting Sum ($):</label>
            <InputNumber id="startingSum" @bind-Value="@CalcModel.StartingSum" min="0" />
            <ValidationMessage For="() => CalcModel.StartingSum" />
        </div>

        <div class="input-element">
            <label for="monthlyContribution">Monthly Contribution ($):</label>
            <InputNumber id="monthlyContribution" @bind-Value="@CalcModel.MonthlyContribution" min="0" />
            <ValidationMessage For="() => CalcModel.MonthlyContribution" />
            <br />
        </div>

        <div class="input-element">
            <label for="interestRate">Interest Rate (%):</label>
            <InputNumber id="interestRate" @bind-Value="@CalcModel.InterestRate" min="0" />
            <ValidationMessage For="() => CalcModel.InterestRate" />
            <br />
        </div>

        <div class="input-element">
            <label for="numberOfYears">Number Of Years:</label>
            <InputNumber id="numberOfYears" @bind-Value="@CalcModel.NumberOfYears" min="0" />
            <ValidationMessage For="() => CalcModel.NumberOfYears" />
            <br />
        </div>

        <div class="input-element">
            <label for="considerInflation">Consider Inflation:</label>
            <InputCheckbox id="considerInflation" @bind-Value="@CalcModel.ConsiderInflation" />
            <br />
        </div>

        @if (CalcModel.ConsiderInflation)
        {
            <div class="input-element">
                <label for="inflationRate">Inflation Rate (%):</label>
                <InputNumber id="inflationRate" @bind-Value="@CalcModel.InflationRate" min="-20" />
                <ValidationMessage For="() => CalcModel.InflationRate" />
                <br />
            </div>
        }

        <button class="btn-primary" type="submit">Calculate</button>
        <button class="btn-danger" type="button" style="margin-left: 10px" @onclick="(() => CalcModel = new())">Reset</button>

        @if (CalcModel.CalculationResult is not null)
        {
            <div class="input-element" style="margin: 50px 0px 0px 0px;">
                <label for="calcResult">Result ($):</label>
                <InputNumber id="calcResult" @bind-Value="@CalcModel.CalculationResult" readonly />
                <br />
            </div>
        }

    </EditForm>
</div>


@code {

    [Parameter]
    public CalculatorModel CalcModel { get; set; } = new();

    private void CalculateCompoundInterest()
    {
        double monthlyInterestRate = CalcModel.InterestRate * 0.01 / 12;
        int totalMonths = CalcModel.NumberOfYears * 12;

        // TODO: Fix calculation, current results too high.

        if (CalcModel.ConsiderInflation)
        {
            CalcModel.CalculationResult =
                (CalcModel.StartingSum * Math.Pow(1 + (CalcModel.InterestRate * 0.01) - (CalcModel.InflationRate * 0.01), CalcModel.NumberOfYears)
                + CalcModel.MonthlyContribution * ((Math.Pow(1 + monthlyInterestRate, totalMonths) - 1) / monthlyInterestRate));

            CalcModel.CalculationResult = Math.Round((CalcModel.CalculationResult).Value, 2);
        }
        else
        {
            CalcModel.CalculationResult = CalcModel.StartingSum * Math.Pow(1 + CalcModel.InterestRate * 0.01, CalcModel.NumberOfYears)
                + CalcModel.MonthlyContribution * ((Math.Pow(1 + monthlyInterestRate, totalMonths) - 1) / monthlyInterestRate);

            CalcModel.CalculationResult = Math.Round((CalcModel.CalculationResult).Value, 2);
        }
    }
}
