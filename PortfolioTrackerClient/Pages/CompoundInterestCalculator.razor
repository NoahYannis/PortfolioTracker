@page "/compound"
@using CompoundInterestCalc;

@inject IStringLocalizer<Resource> Localizer

<div class="flexbox">
    <EditForm Model="@CalcModel" OnValidSubmit="CalculateCompoundInterest">
        <DataAnnotationsValidator />

        <div class="flexbox-item">
            <div class="flex-container">
                <label class="label" for="startingSum">@Localizer["StartingSum"]:</label>
                <InputNumber id="startingSum" @bind-Value="@CalcModel.StartingSum" min="0" />
            </div>
            <ValidationMessage For="() => CalcModel.StartingSum" />
        </div>

        <div class="flexbox-item">
            <div class="flex-container">
                <label class="label" for="monthlyContribution">@Localizer["MonthlyContribution"]:</label>
                <InputNumber id="monthlyContribution" @bind-Value="@CalcModel.MonthlyContribution" min="0" />
            </div>
            <ValidationMessage For="() => CalcModel.MonthlyContribution" />
        </div>

        <div class="flexbox-item">
            <div class="flex-container">
                <label class="label" for="interestRate">@Localizer["InterestRate"]:</label>
                <InputNumber id="interestRate" @bind-Value="@CalcModel.InterestRate" min="0" />
            </div>
            <ValidationMessage For="() => CalcModel.InterestRate" />
        </div>

        <div class="flexbox-item">
            <div class="flex-container">
                <label class="label" for="numberOfYears">@Localizer["NumberOfYears"]:</label>
                <InputNumber id="numberOfYears" @bind-Value="@CalcModel.NumberOfYears" min="0" />
            </div>
            <ValidationMessage For="() => CalcModel.NumberOfYears" />
        </div>

        <div class="flexbox-item">
            <div class="flex-container">
                <label class="label" for="considerInflation">@Localizer["ConsiderInflation"]:</label>
                <InputCheckbox id="considerInflation" @bind-Value="@CalcModel.ConsiderInflation" />
            </div>
        </div>

        @if (CalcModel.ConsiderInflation)
        {
            <div class="flexbox-item">
                <div class="flex-container">
                    <label class="label" for="inflationRate">@Localizer["InflationRate"]:</label>
                    <InputNumber id="inflationRate" @bind-Value="@CalcModel.InflationRate" min="-20" />
                </div>
                <ValidationMessage For="() => CalcModel.InflationRate" />
            </div>
        }

        <div class="buttons">
            <button class="btn-secondary"  type="submit">@Localizer["Calculate"]</button>
            <button class="btn-danger" type="button" style="margin-left: 10px" @onclick="(() => CalcModel = new())">@Localizer["Reset"]</button>
        </div>

        @if (CalcModel.CalculationResult is not null)
        {
            <div class="flexbox-item" style="margin: 50px 0px 0px 0px;">
                <div class="flex-container">
                    <label class="label" for="calcResult">@Localizer["Result"]:</label>
                    <InputNumber id="calcResult" @bind-Value="@CalcModel.CalculationResult" readonly />
                </div>
            </div>
        }
    </EditForm>
</div>




@code {
    [Parameter]

    public CalculatorModel CalcModel { get; set; } = new();

    private void CalculateCompoundInterest()
    {
        double monthlyInterestRate = CalcModel.InterestRate * 0.01 / 12;
        int totalMonths = CalcModel.NumberOfYears * 12;

        if (CalcModel.ConsiderInflation)
        {
            CalcModel.CalculationResult =
                (CalcModel.StartingSum * Math.Pow(1 + (CalcModel.InterestRate * 0.01) - (CalcModel.InflationRate * 0.01), CalcModel.NumberOfYears)
                + CalcModel.MonthlyContribution * ((Math.Pow(1 + monthlyInterestRate, totalMonths) - 1) / monthlyInterestRate));

            CalcModel.CalculationResult = Math.Round((CalcModel.CalculationResult).Value, 2);
        }
        else
        {
            CalcModel.CalculationResult = CalcModel.StartingSum * Math.Pow(1 + CalcModel.InterestRate * 0.01, CalcModel.NumberOfYears)
                + CalcModel.MonthlyContribution * ((Math.Pow(1 + monthlyInterestRate, totalMonths) - 1) / monthlyInterestRate);

            CalcModel.CalculationResult = Math.Round((CalcModel.CalculationResult).Value, 2);
        }
    }
}
