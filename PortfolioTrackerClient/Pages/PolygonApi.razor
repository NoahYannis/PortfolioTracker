@page "/polygon"

@using PortfolioTrackerClient.Services.GetStockInfoService;
@using PortfolioTrackerShared.Other;

@inject IGetStockInfoService GetStockInfoService
@inject IStringLocalizer<Resource> Localizer

<div class="flexbox">
    <div class="polygon">
        <label class="enter-ticker" for="stockTicker">@Localizer["EnterStockTicker"]: </label>
        <InputText id="stockTicker" @bind-Value="Ticker" />
    </div>
    <div class="polygon">
        <button class="btn-secondary" style="margin-bottom: 40px;" @onclick='async () => CurrentStock = await ReturnStockFromApiCall(Ticker)'>
            @Localizer["Confirm"]
        </button>

        <!-- Display stock data if a ticker was specified and no error occured-->
        @if (!string.IsNullOrEmpty(CurrentStock.Ticker) && string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="result">
                <p>Pre Market: $@CurrentStock.PreMarket </p>
                <p>After Hours: $@CurrentStock.AfterHours</p>
                <p>Open: $@CurrentStock.Open</p>
                <p>Close: $@CurrentStock.Close</p>
                <p>Low: $@CurrentStock.Low</p>
                <p style="margin-bottom: 0">High: $@CurrentStock.High</p>
            </div>
        }
        else
        {
            <p>
                <br>
                @(ErrorMessage)
            </p>
        }
    </div>
</div>


@code {

    /// <summary>
    /// The ticker symbol entered by the user inside the input text field.
    /// </summary>
    public string Ticker { get; set; } = string.Empty;


    /// <summary>
    /// The current stock requested by the user.
    /// </summary>
    public ApiQueryStock CurrentStock { get; set; } = new();


    /// <summary>
    /// Error message that contains the Http.ReasonPhrase
    /// </summary>
    public string ErrorMessage { get; set; } = string.Empty;


    /// <summary>
    /// Returns stock data from api call and sets the error message
    /// </summary>
    public async Task<ApiQueryStock> ReturnStockFromApiCall(string tickerSymbol)
    {
        if (string.IsNullOrWhiteSpace(tickerSymbol))
        {
            ErrorMessage = "No ticker was specified";
            return CurrentStock;
        }

        var response = await GetStockInfoService.GetStockData(tickerSymbol.ToUpper());
        ErrorMessage = response.Success ? string.Empty : response.Message;

        return response.Data ?? CurrentStock;
    }

}

