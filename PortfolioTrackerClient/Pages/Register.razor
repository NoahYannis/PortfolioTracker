@page "/register"

@using PortfolioTrackerClient.Services.AuthService;
@using PortfolioTrackerShared.Models.UserModels;

@inject IAuthService AuthService
@inject IStringLocalizer<Resource> Localizer
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager

<PageTitle>@Localizer["Register"]</PageTitle>

<h3>@Localizer["Register"]</h3>

<EditForm Model="userRegister" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="name">@Localizer["Username"]:</label>
        <InputText id="name" @bind-Value="userRegister.Name" class="form-control"></InputText>
        <ValidationMessage For="@(() => userRegister.Name)" />
    </div>
    <div class="mb-3">
        <label for="email">@Localizer["Email"]:</label>
        <InputText id="email" @bind-Value="userRegister.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => userRegister.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">@Localizer["Password"]</label>
        <InputText id="password" @bind-Value="userRegister.Password" type="password" class="form-control"></InputText>
        <ValidationMessage For="@(() => userRegister.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassord">@Localizer["ConfirmPassword"]</label>
        <InputText id="confirmPassord" @bind-Value="userRegister.ConfirmPassword" type="password" class="form-control"></InputText>
        <ValidationMessage For="@(() => userRegister.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">@Localizer["Register"]</button>
    <a style="margin-left: 10px;" href="/login">Login</a>
    <div class="@messageCssClass" style="margin-top: 10px;">
        <span>@message</span>
    </div>
</EditForm>

@code {

    UserRegister userRegister = new();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(userRegister);

        if (result.Success)
        {
            var loginAuthToken = await AuthService.Login(new UserLogin { Email = userRegister.Email, Password = userRegister.Password });
            await LocalStorage.SetItemAsync("authToken", loginAuthToken.Data);
            NavManager.NavigateTo("/portfolio", true);
        }
    }
}