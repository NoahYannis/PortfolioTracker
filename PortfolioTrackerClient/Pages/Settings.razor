@page "/settings"
@using System.Collections.Generic
@using Microsoft.AspNetCore.Authorization;
@using BlazorColorPicker;
@using PortfolioTrackerClient.Services.SettingsService;
@using Blazored.TextEditor;

@attribute [Authorize]

@inject NavigationManager NavManager
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject ISettingsService SettingsService
@inject IStringLocalizer<Resource> Localizer

 @*Test*@
<h3>@Localizer["HelloWorld"]</h3>

@if (editing)
{
        <h3>Contact Data</h3>

    <div>
        <label for="Name">Name:</label>
        <span id="Name">@User.UserName</span>
    </div>
    <div>
        <label for="Email">Email:</label>
        <span id="Email">@User.Email</span>
    </div>
    <hr /> <!-- Separator -->

        <h3>Preferences</h3>

    <div>
        <label for="ColorScheme">Color scheme</label>
        <ColorPicker IsOpened="@colorPickerOpen" Closed="CloseColorPicker" MyColor="UserSettings.ColorScheme"/>
        <button class="btn btn-primary" @onclick="OpenModal">
            <div style="background-color: @UserSettings.ColorScheme" class="buttonColor"></div>
            Select Color
        </button>
    </div>

    <div style="margin-top: 20px;">
        <EditForm Model="UserSettings">
            <label for="preferedLanguage">Prefered Language:</label>
            <InputSelect id="preferedLanguage" @bind-Value="UserSettings.PreferedLanguage">
                <option value="Deutsch">Deutsch</option>
                <option value="English">English</option>
                <option value="français">français</option>
                <option value="español">español</option>
                <option value="русский">русский</option>
            </InputSelect>
        </EditForm>
    </div>

    <hr /> <!-- Separator -->

    <h3>Investing Goals</h3>

    <hr /> <!-- Separator -->

    <BlazoredTextEditor @ref="@richEditor" Placeholder="Make $100/month in dividends. Achieve a $100,000 portfolio.">
        <EditorContent>
            @UserSettings.InvestingGoals
        </EditorContent>
    </BlazoredTextEditor>

    <hr /> <!-- Separator -->
    <button class="btn btn-primary" @onclick="SaveInvestingGoals">Save Goals</button>

    <button class="btn btn-primary" @onclick="SaveProfile">Save</button>
}
else
{
    <div>
        <label for="Name">Name:</label>
        <span id="Name">@User.UserName</span>
    </div>
    <div>
        <label for="Email">Email:</label>
        <span id="Email">@User.Email</span>
    </div>

    <hr /> <!-- Separator -->

    <h3>Preferences</h3>

    <div>
        <label for="ColorScheme">Color scheme</label>
        <ColorPicker IsOpened="@colorPickerOpen" Closed="CloseColorPicker" MyColor="UserSettings.ColorScheme" />
        <button class="btn btn-primary" @onclick="OpenModal">
            <div style="background-color: @UserSettings.ColorScheme" class="buttonColor"></div>
            Select Color
        </button>
    </div>

    <hr /> <!-- Separator -->

    <button class="btn btn-primary" @onclick="EditProfile">Edit</button>
}

@code {

    private User User { get; set; } = new();

    private UserSettings UserSettings { get; set; } = new();

    BlazoredTextEditor richEditor { get; set; } = new();

    private bool editing;

    private bool isUserAuthenticated;

    private bool colorPickerOpen;

    private void EditProfile() => editing = true;

    protected override async Task OnInitializedAsync()
    {
        // Get the email of the currently authenticated user.
        AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();
        string email = authState.User.Claims.ElementAt(2).Value;

        // Get the user from the database.
        var userServiceResponse = await AuthService.GetUserFromDbByEmail(email);
        User = userServiceResponse.Data;

        UserSettings = await SettingsService.GetUserSettings(User.UserId);
    }


    private async void SaveProfile()
    {
        editing = false;
        await SettingsService.UpdateUserSettings(UserSettings);

        // Reload page to apply changes. StateHasChanged() doesnt seem to work here.
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true); 
    }

    private void OpenModal() => colorPickerOpen = true;

    private void CloseColorPicker(string chosenColor)
    {
        UserSettings.ColorScheme = chosenColor;
        colorPickerOpen = false;
    }

    private async void SaveInvestingGoals()
    {
        UserSettings.InvestingGoals = await richEditor.GetText();
    }
}

