@page "/settings"
@using System.Collections.Generic
@using Microsoft.AspNetCore.Authorization;
@using BlazorColorPicker;
@using PortfolioTrackerClient.Services.SettingsService;
@using Blazored.TextEditor;
@using System.Globalization;

@attribute [Authorize]

@inject IAuthService AuthService
@inject ISettingsService SettingsService
@inject IStringLocalizer<Resource> Localizer
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime


@if (editing)
{
    <h3>@Localizer["ContactData"]</h3>

    <hr /> <!-- Separator -->

    <div class="flexbox">
        <div class="flexbox-item">
            <label class="label" for="Name">@Localizer["Username"]:</label>
            <span class="label" id="Name">@PortfolioOwner.UserName</span>
        </div>
        <div class="flexbox-item">
            <label class="label" for="Email">@Localizer["Email"]:</label>
            <span class="label" id="Email">@PortfolioOwner.Email</span>
        </div>
    </div>

    <hr /> <!-- Separator -->

    <h3 class="section">@Localizer["Preferences"]</h3>

    <hr /> <!-- Separator -->

    <div>
        <ColorPicker IsOpened="@colorPickerOpen" Closed="CloseColorPicker" MyColor="UserSettings.ColorScheme" />
        <button class="btn btn-secondary" style="margin: 20px 20px 20px 0;" @onclick="OpenModal">
            <div style="background-color: @UserSettings.ColorScheme" class="buttonColor"></div>
            @Localizer["SelectColor"]
        </button>
    </div>

    <hr /> <!-- Separator -->

    <h3 class="section">@Localizer["InvestingGoals"]</h3>

    <hr style="margin-bottom: 50px;" /> <!-- Separator -->

    <BlazoredTextEditor @ref="@richEditor" Placeholder="@Localizer["InvestingGoalsPlaceholder"]">
        <EditorContent @onchange="(() => await @SaveInvestingGoals()">
            @UserSettings.InvestingGoals
        </EditorContent>
    </BlazoredTextEditor>

    <hr style="margin-top: 50px;" /> <!-- Separator -->

    <button class="btn btn-secondary" @onclick="SaveProfile">@Localizer["Save"]</button>
}
else
{
    <h3>@Localizer["ContactData"]</h3>

    <hr /> <!-- Separator -->

    <div class="flexbox">
        <div class="flexbox-item">
            <label class="label" for="Name">@Localizer["Username"]:</label>
            <span class="label" id="Name">@PortfolioOwner.UserName</span>
        </div>
        <div class="flexbox-item">
            <label class="label" for="Email">@Localizer["Email"]:</label>
            <span class="label" id="Email">@PortfolioOwner.Email</span>
        </div>
    </div>

    <hr /> <!-- Separator -->

    <h3 class="section">@Localizer["Preferences"]</h3>

    <hr /> <!-- Separator -->

    <div>
        <ColorPicker IsOpened="@colorPickerOpen" Closed="CloseColorPicker" MyColor="UserSettings.ColorScheme" />
        <button class="btn btn-secondary" style="margin: 20px 20px 20px 0;" @onclick="OpenModal" disabled="!@editing">
            @* Disable color selection if the user is not editing *@
            <div style="background-color: @UserSettings.ColorScheme" class="buttonColor"></div>
            @Localizer["SelectColor"]
        </button>
    </div>

    <hr /> <!-- Separator -->

    <h3 class="section">@Localizer["InvestingGoals"]</h3>

    <hr style="margin-bottom: 50px;" /> <!-- Separator -->

    <BlazoredTextEditor  @ref="@richEditor" Placeholder="@Localizer["InvestingGoalsPlaceholder"]" ReadOnly="true">
        <EditorContent>
            @UserSettings.InvestingGoals
        </EditorContent>
    </BlazoredTextEditor>

    <hr style="margin-top: 50px;" /> <!-- Separator -->

    <button class="btn btn-secondary" style="margin-bottom: 20px" @onclick="EditProfile">@Localizer["Edit"]</button>
}

@code {

    private User PortfolioOwner { get; set; } = new();

    private UserSettings UserSettings { get; set; } = new();

    BlazoredTextEditor richEditor { get; set; } = new();

    private bool editing;

    private bool isUserAuthenticated;

    private bool colorPickerOpen;

    private void EditProfile() => editing = true;

    protected override async Task OnInitializedAsync()
    {
        PortfolioOwner = await AuthService.GetPortfolioOwner();
        UserSettings = await SettingsService.GetUserSettings(PortfolioOwner.UserId);
    }

    private async void SaveProfile()
    {
        editing = false;
        UserSettings.InvestingGoals = await richEditor.GetText();
        await SettingsService.UpdateUserSettings(UserSettings);

        // Reload page to apply changes. StateHasChanged() doesnt seem to work here.
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private void OpenModal() => colorPickerOpen = true;

    private void CloseColorPicker(string chosenColor)
    {
        UserSettings.ColorScheme = chosenColor;
        JsRuntime.InvokeVoidAsync("localStorage.setItem", "customColor", UserSettings.ColorScheme);
        colorPickerOpen = false;
    }
}

