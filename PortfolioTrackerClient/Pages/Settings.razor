@page "/settings"
@using System.Collections.Generic
@using Microsoft.AspNetCore.Authorization;
@using BlazorColorPicker;
@using PortfolioTrackerClient.Services.SettingsService;
@using Blazored.TextEditor;
@using System.Globalization;

@attribute [Authorize]

@inject NavigationManager NavManager
@inject IAuthService AuthService
@inject ISettingsService SettingsService
@inject IStringLocalizer<Resource> Localizer


@if (editing)
{
    <h3>@Localizer["ContactData"]</h3>

    <div>
        <label for="Name">@Localizer["Username"]:</label>
        <span id="Name">@User.UserName</span>
    </div>
    <div>
        <label for="Email">@Localizer["Email"]:</label>
        <span id="Email">@User.Email</span>
    </div>
    <hr /> <!-- Separator -->

    <h3>@Localizer["Preferences"]</h3>

    <div>
        <label for="ColorScheme">@Localizer["ColorScheme"]</label>
        <ColorPicker IsOpened="@colorPickerOpen" Closed="CloseColorPicker" MyColor="UserSettings.ColorScheme"/>
        <button class="btn btn-primary" @onclick="OpenModal">
            <div style="background-color: @UserSettings.ColorScheme" class="buttonColor"></div>
            @Localizer["SelectColor"]
        </button>
    </div>

    <hr /> <!-- Separator -->

    <h3>@Localizer["InvestingGoals"]</h3>

    <hr /> <!-- Separator -->

    <BlazoredTextEditor @ref="@richEditor" Placeholder="@Localizer["InvestingGoalsPlaceholder"]">
        <EditorContent @onchange="(() => await @SaveInvestingGoals()">
            @UserSettings.InvestingGoals
        </EditorContent>
    </BlazoredTextEditor>

    <hr /> <!-- Separator -->

    <button class="btn btn-primary" @onclick="SaveProfile">@Localizer["Save"]</button>
}
else
{
    <div>
        <label for="Name">@Localizer["Username"]:</label>
        <span id="Name">@User.UserName</span>
    </div>
    <div>
        <label for="Email">@Localizer["Email"]:</label>
        <span id="Email">@User.Email</span>
    </div>

    <hr /> <!-- Separator -->

    <h3>@Localizer["Preferences"]</h3>

    <div>
        <label for="ColorScheme">@Localizer["ColorScheme"]</label>
        <ColorPicker IsOpened="@colorPickerOpen" Closed="CloseColorPicker" MyColor="UserSettings.ColorScheme" />
        <button class="btn btn-primary" @onclick="OpenModal" disabled="!@editing"> @* Disable color selection if the user is not editing *@
            <div style="background-color: @UserSettings.ColorScheme" class="buttonColor"></div>
            @Localizer["SelectColor"]
        </button>
    </div>

    <hr /> <!-- Separator -->

    <BlazoredTextEditor @ref="@richEditor" Placeholder="@Localizer["InvestingGoalsPlaceholder"]" ReadOnly="true">
        <EditorContent>
            @UserSettings.InvestingGoals
        </EditorContent>
    </BlazoredTextEditor>

    <hr /> <!-- Separator -->

    <button class="btn btn-primary" @onclick="EditProfile">@Localizer["Edit"]</button>
}

@code {

    private User User { get; set; } = new();

    private UserSettings UserSettings { get; set; } = new();

    BlazoredTextEditor richEditor { get; set; } = new();

    private bool editing;

    private bool isUserAuthenticated;

    private bool colorPickerOpen;

    private void EditProfile() => editing = true;

    protected override async Task OnInitializedAsync()
    {
        var serviceResponse = await AuthService.GetPortfolioOwner();
        User = serviceResponse?.Data ?? new();
        UserSettings = await SettingsService.GetUserSettings(User.UserId);
    }


    private async void SaveProfile()
    {
        editing = false;
        UserSettings.InvestingGoals = await richEditor.GetText();
        await SettingsService.UpdateUserSettings(UserSettings);

        // Reload page to apply changes. StateHasChanged() doesnt seem to work here.
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true); 
    }

    private void OpenModal() => colorPickerOpen = true;

    private void CloseColorPicker(string chosenColor)
    {
        UserSettings.ColorScheme = chosenColor;
        colorPickerOpen = false;
    }
}

