@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Authorization;
@using PortfolioTrackerClient.Services.AuthService;
@using PortfolioTrackerShared.Models.UserModels;
@using Microsoft.AspNetCore.WebUtilities


<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" type="password" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
    <a style="margin-left: 10px;" href="/register">Sign up</a>

</EditForm>
<div class="text-danger" style="margin-top: 10px;">
    <span>@errorMessage</span>
</div>


@code {

    private UserLogin user = new();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;        
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);

        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}