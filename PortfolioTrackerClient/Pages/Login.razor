@page "/login"

@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject IStringLocalizer<Resource> Localizer
@inject IEmailService EmailService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Authorization;
@using PortfolioTrackerClient.Services.AuthService;
@using PortfolioTrackerClient.Services.EmailService;
@using PortfolioTrackerShared.Models.UserModels;
@using Microsoft.AspNetCore.WebUtilities



<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">@Localizer["Email"]:</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">@Localizer["Password"]:</label>
        <InputText id="password" @bind-Value="user.Password" type="password" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">@Localizer["Login"]</button>
    <a style="margin-left: 10px;" href="/register">@Localizer["SignUp"]</a>

    <br />

    @if (displayChangePasswordButton)
    {
        <br />
        <div class="mb-3">
            <label for="email">@Localizer["ResetEmail"]:</label>
            <input type="email" id="email" @bind="passwordResetEmail" class="form-control"></input>
        </div>
        <button type="button" style="margin-top: 20px;" class="btn btn-danger" @onclick="SendPasswordResetEmail">@Localizer["ChangePassword"]</button>
    }

</EditForm>
<div class="text-danger" style="margin-top: 10px;">
    <span>@errorMessage</span>
</div>


@code {

    private UserLogin user = new();
    private string returnUrl = string.Empty;

    private bool displayChangePasswordButton;
    private string errorMessage { get; set; } = string.Empty;
    private string passwordResetEmail { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);

        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavManager.NavigateTo("/portfolio", true);
        }
        else
        {
            errorMessage = result.Message;

            // Offer password change if needed.
            displayChangePasswordButton = true;
        }
    }


    /// <summary>
    /// Sends a password reset email to the specified email
    /// </summary>
    private async Task SendPasswordResetEmail()
    {
        await EmailService.SendEmail("My very important C# email", passwordResetEmail);
        NavManager.NavigateTo("/change-password", true);
    }

}