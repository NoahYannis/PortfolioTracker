@using PortfolioTrackerClient.Services.SettingsService;
@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject ISettingsService SettingsService
@inject IAuthService AuthService
@inject IStringLocalizer<Resource> Localizer


<div class="page">
    <div class="sidebar" style="background-image: linear-gradient(180deg, @sidebarcolor 0%, #3a0647 100%);">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (IsAuthenticated)
            {
                <a href="#" @onclick="Logout" target="_self">@Localizer["Logout"]</a>
                <a href="/settings" target="_self">@Localizer["Settings"]</a>
            }
            else
            {
                <a href="/register" target="_self">@Localizer["Register"]</a>
                <a href="/login" target="_self">Login</a>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private AuthenticationState authenticationState;
    private bool IsAuthenticated;
    private string sidebarcolor = string.Empty;

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        StateHasChanged();
        NavigationManager.NavigateTo("/", forceLoad: true);
    }


    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsAuthenticated = authenticationState.User.Identity.IsAuthenticated;

        var userServiceResponse = await AuthService.GetUserFromDbByEmail(authenticationState.User.Claims.ElementAt(2).Value);
        var userSettings = await SettingsService.GetUserSettings(userServiceResponse.Data.UserId);

        sidebarcolor = userSettings.ColorScheme;
    }
}