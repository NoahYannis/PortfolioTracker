@using ChartJs.Blazor.PieChart
@using Microsoft.JSInterop.Implementation;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using PortfolioTrackerClient.Services.PortfolioService;
@using PortfolioTrackerShared.Other;
@using System.Drawing;

@inject IPortfolioService PortfolioService
@inject IGetStockInfoService StockInfoService
@inject IModalService ModalService
@inject IStringLocalizer<Resource> Localizer


<Chart Config="_config" />
<br />
<button @onclick="OpenModal">@Localizer["AddNewStock"]</button>
<UpdateStockComponent StockToUpdate="@ClickedSegmentStock"/>

@code {


    [Parameter]
    public User PortfolioOwner { get; set; }

    private PieConfig _config = new();
    private List<string> BackgroundColors { get; set; } = new List<string>();
    private PieDataset<decimal?> Dataset { get; set; } = new PieDataset<decimal?>();
    private Random random = new Random();
    private decimal? Performance { get; set; }

    // AddStock modal
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    private PortfolioStock ClickedSegmentStock { get; set; } = new();
    private int clickedIndex;



    protected override async void OnInitialized()
    {
        _config = new PieConfig
            {
                Options = new PieOptions
                {
                    OnClick = new DelegateHandler<ChartMouseEvent>(ChartClicked),
                    Responsive = true,
                    Title = new OptionsTitle {Display = true},
                }
            };


        PortfolioService.PortfolioChanged += UpdatePieChart;

        await PortfolioService.InitializePortfolioAsync(PortfolioOwner.UserId);

        // For each stock inside the portfolio display its ticker and set the background to a random color.
        foreach (PortfolioStock stock in PortfolioService.PortfolioStocks)
        {
            _config.Data.Labels.Add(stock.Ticker);
            Dataset.Add(stock.PositionSize);

            Color randomColor = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
            string colorHex = ColorUtil.ColorHexString(randomColor.R, randomColor.G, randomColor.B);
            BackgroundColors.Add(colorHex);
        }

        Dataset.BackgroundColor = BackgroundColors.ToArray();
        _config.Data.Datasets.Add(Dataset);

        StateHasChanged();
    }


    /// <summary>
    /// The portfolio has changed. Create new labels and segments.
    /// </summary>
    public void UpdatePieChart(object sender, PortfolioChangedArgs p)
    {
        ClearPieChart();

        foreach (PortfolioStock stock in p.UpdatedPortfolio)
        {
            _config.Data.Labels.Add(stock.Ticker);
            Dataset.Add(stock.PositionSize);

            if (p.PortfolioAction is PortfolioAction.Added && stock == p.ModifiedStock)
            {
                Color randomColor = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
                string colorHex = ColorUtil.ColorHexString(randomColor.R, randomColor.G, randomColor.B);
                BackgroundColors.Add(colorHex);
            }
        }

        // If a stock was deleted, also delete the background color at its index
        if (p.PortfolioAction is PortfolioAction.Deleted)
            BackgroundColors.RemoveAt(clickedIndex);

        Dataset.BackgroundColor = BackgroundColors.ToArray();
        _config.Data.Datasets.Add(Dataset);
    }


    /// <summary>
    /// Clear the old chart before rerendering it with the new data.
    /// </summary>
    public async Task ClearPieChart()
    {
        _config.Data.Labels.Clear();
        _config.Data.Datasets.Clear();
        Dataset.Clear();

        // Tell Blazor to update the UI. Wait to ensure other other processes are finished.
        await Task.Delay(10);
        StateHasChanged();
    }


    /// <summary>
    /// Get the label name of the clicked segment.
    /// </summary>
    /// <param name="mouseEvent"></param>
    /// <param name="activeElements"></param>
    public void ChartClicked(JObject mouseEvent, JArray activeElements)
    {
        foreach (JObject elem in activeElements)
        {
            foreach (JProperty prop in elem.GetValue("_model"))
            {
                if (prop.Name.Equals("label"))
                {
                    ClickedSegmentStock = PortfolioService.PortfolioStocks.FirstOrDefault(s => s.Ticker == prop.Value.ToString());
                    clickedIndex = PortfolioService.PortfolioStocks.IndexOf(ClickedSegmentStock);
                    StateHasChanged();
                }
            }
        }
    }

    public decimal? DisplayPortfolioPerformance(bool showRelativePerformance)
    {
        if (showRelativePerformance)
        {
            return Performance = PortfolioService.PortfolioStocks.Sum(s => s.RelativePerformance);
        }
        else
        {
            return Performance = PortfolioService.PortfolioStocks.Sum(s => s.AbsolutePerformance);
        }
    }

    /// <summary>
    /// Determine CSS class based on stock performance.
    /// </summary>
    /// <returns></returns>
    private string DeterminePerformanceColor(decimal? performance)
    {
        if (performance is not null)
            return performance > 0 ? "color: green" : "color: red";

        return string.Empty;
    }

    /// <summary>
    /// Shows the AddStock modal
    /// </summary>
    /// <returns>Whether a stock should be added or not</returns>
    private void OpenModal()
    {
        var addStockModal = Modal.Show<AddStockComponent>(Localizer["AddNewStock"]);
    }

    public void Dispose()
    {
        PortfolioService.PortfolioChanged -= UpdatePieChart;
    }
}
