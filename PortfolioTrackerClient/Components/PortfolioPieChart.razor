@using ChartJs.Blazor.PieChart
@using Microsoft.JSInterop.Implementation;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using PortfolioTrackerClient.Services.PortfolioService;
@using PortfolioTrackerShared.Other;
@using System.Drawing;

@inject IPortfolioService PortfolioService
@inject IJSRuntime JsRuntime;



<Chart Config="_config" />
<br />

<UpdateStockComponent StockToUpdate="@ClickedSegmentStock">
</UpdateStockComponent>

@code {
    private PieConfig _config = new();
    private List<Stock> PortfolioStocks { get; set; } = new();
    private List<string> BackgroundColors { get; set; } = new List<string>();
    private PieDataset<decimal?> Dataset { get; set; } = new PieDataset<decimal?>();
    private Random random = new Random();

    private Stock ClickedSegmentStock { get; set; } = new();
    private int clickedIndex;

    protected override async void OnInitialized()
    {
        PortfolioStocks = await PortfolioService.GetStocks();

        PortfolioService.PortfolioChanged += UpdatePieChart;

        _config = new PieConfig
            {
                Options = new PieOptions
                {
                    OnClick = new DelegateHandler<ChartMouseEvent>(ChartClicked),
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Your Portfolio",
                    }
                }
            };


        // For each stock inside the portfolio display its ticker and set the background to a random color.
        foreach (Stock stock in PortfolioStocks)
        {
            _config.Data.Labels.Add(stock.Ticker);
            Dataset.Add(stock.PositionSize);

            Color randomColor = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
            string colorHex = ColorUtil.ColorHexString(randomColor.R, randomColor.G, randomColor.B);
            BackgroundColors.Add(colorHex);
        }

        Dataset.BackgroundColor = BackgroundColors.ToArray();
        _config.Data.Datasets.Add(Dataset);
    }


    /// <summary>
    /// The portfolio has changed. Create new labels and segments.
    /// </summary>
    public void UpdatePieChart(object sender, PortfolioChangedArgs p)
    {
        ClearPieChart();

        foreach (Stock stock in p.UpdatedPortfolio)
        {
            _config.Data.Labels.Add(stock.Ticker);
            Dataset.Add(stock.PositionSize);

            if (p.PortfolioAction is PortfolioAction.Added && stock == p.ModifiedStock)
            {
                Color randomColor = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));
                string colorHex = ColorUtil.ColorHexString(randomColor.R, randomColor.G, randomColor.B);
                BackgroundColors.Add(colorHex);
            }
        }

        // If a stock was deleted, also delete the background color at its index
        if (p.PortfolioAction is PortfolioAction.Deleted)
            BackgroundColors.RemoveAt(clickedIndex);
        
        Dataset.BackgroundColor = BackgroundColors.ToArray();
        _config.Data.Datasets.Add(Dataset);
    }


    /// <summary>
    /// Clear the old chart before rerendering it with the new data.
    /// </summary>
    public async Task ClearPieChart()
    {
        _config.Data.Labels.Clear();
        _config.Data.Datasets.Clear();
        Dataset.Clear();

        // Tell Blazor to update the UI. Wait to ensure other other processes are finished.
        await Task.Delay(10);
        StateHasChanged();
    }



    /// <summary>
    /// Get the label name of the clicked segment.
    /// </summary>
    /// <param name="mouseEvent"></param>
    /// <param name="activeElements"></param>
    public void ChartClicked(JObject mouseEvent, JArray activeElements)
    {
        foreach (JObject elem in activeElements)
        {
            foreach (JProperty prop in elem.GetValue("_model"))
            {
                if (prop.Name.Equals("label"))
                {
                    // Debug
                    Console.WriteLine(prop.Value.ToString());

                    ClickedSegmentStock = PortfolioStocks.FirstOrDefault(s => s.Ticker == prop.Value.ToString());
                    clickedIndex = PortfolioStocks.IndexOf(ClickedSegmentStock);

                    StateHasChanged();
                }
            }
        }
    }


    public void Dispose()
    {
        PortfolioService.PortfolioChanged -= UpdatePieChart;
    }
}
