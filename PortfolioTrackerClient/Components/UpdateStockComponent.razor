@using PortfolioTrackerClient.Pages;
@using PortfolioTrackerClient.Services.PortfolioService;
@using PortfolioTrackerShared.Models;
@using PortfolioTrackerShared.Other;
@using Blazored;
@using Blazored.Modal;
@using Blazored.Modal.Services;

@inject IPortfolioService PortfolioService
@inject IModalService ModalService
@inject IStringLocalizer<Resource> Localizer

<div class="flexbox">
    <EditForm style="max-width: clamp(350px, 70%, 500px);" Model="@StockToUpdate" OnValidSubmit='async() => await UpdateStock(StockToUpdate, PortfolioOwner.UserId)'>
        <DataAnnotationsValidator />

        <div class="flexbox-item">
            <div class="label-container">
                <label class="label" for="stockTicker">@Localizer["StockTicker"]: </label>
            </div>
            <div class="input-container">
                <InputText id="stockTicker" @bind-Value="StockToUpdate.Ticker" readonly/>
                <br /><br />
            </div>
        </div>

       <div class="flexbox-item">
            <div class="label-container">
                <label class="label" for="currentPrice">@Localizer["CurrentPrice"]: </label>
            </div>
            <div class="input-container">
                <InputNumber id="currentPrice" @bind-Value="StockToUpdate.CurrentPrice" readonly/>
                <br /><br />
            </div>
        </div>

        <div class="flexbox-item">
            <div class="label-container">
                <label class="label" for="sharesOwned">@Localizer["SharesOwned"]: </label>
            </div>
            <div class="input-container">
                <InputNumber id="sharesOwned" @bind-Value="StockToUpdate.SharesOwned" min="0" />
                <ValidationMessage For="() => StockToUpdate.SharesOwned" />
                <br /><br />
             </div>
        </div>

        <div class="flexbox-item">
            <div class="label-container">
                <label class="label" for="positionSize">@Localizer["PositionSize"] ($): </label>
            </div>
            <div class="input-container">
                <InputNumber id="positionSize" @bind-Value="StockToUpdate.PositionSize" min="0" />
                <ValidationMessage For="() => StockToUpdate.PositionSize" />
                <br /><br />

            </div>
        </div>

        <div class="flexbox-item">
             <div class="label-container">
                 <label class="label" for="buyinPrice">@Localizer["BuyInPrice"]: </label>
            </div>
            <div class="input-container">
                <InputNumber id="buyinPrice" @bind-Value="StockToUpdate.BuyInPrice" min="0" />
                <ValidationMessage For="() => StockToUpdate.BuyInPrice" />
                <br /><br />
            </div>
        </div>

        <div class="flexbox-item">
            <div class="label-container">
                <label class="label" for="industry">@Localizer["Industry"]: </label>
             </div>
            <div class="input-container">
                <InputSelect id="industry" @bind-Value="StockToUpdate.Industry">
                    @foreach (Industry industry in Enum.GetValues(typeof(Industry)))
                    {
                        <option>@GetDisplayValue(industry)</option>
                    }
                </InputSelect>
                <br /><br />
            </div>
        </div>

        <div class="flexbox-item">
            <div class="label-container">
                <label class="label" for="dividendYield">@Localizer["DividendYield"]: </label>
             </div>
            <div class="input-container">
                 <InputNumber id="dividendYield" @bind-Value="StockToUpdate.DividendYield" min="0" />
                 <ValidationMessage For="() => StockToUpdate.DividendYield" />
                 <br /><br />

            </div>
        </div>

        <br />

        <div class="flexbox-item">
            <div class="label-container">
                <label class="label" for="relativePerformance">@Localizer["RelativePerformance"]: </label>
            </div>
             <div class="input-container">
                <InputNumber style="@DeterminePerformanceColor(StockToUpdate.RelativePerformance)" id="relativePerformance" @bind-Value="StockToUpdate.RelativePerformance" readonly/>
                <br /><br />
            </div>
        </div>


        <div class="flexbox-item">
            <div class="label-container">
                <label class="label" for="absolutePerformance">@Localizer["AbsolutePerformance"]: </label>
            </div>
            <div class="input-container">
                <InputNumber style="@DeterminePerformanceColor(StockToUpdate.AbsolutePerformance)" id="absolutePerformance" @bind-Value="StockToUpdate.AbsolutePerformance" readonly/>
                <br /><br />
            </div>
        </div>

        <div class="flexbox-item">
            <button class="btn-primary" type="submit">@Localizer["Update"]</button>
            <button class="btn-danger" type="button" style="margin-left: 10px" @onclick="async() => await DeleteStock(StockToUpdate.Ticker, PortfolioOwner.UserId)">@Localizer["Delete"]</button>
            <button class="btn-outline-secondary" style="margin-left: 10px" @onclick="async() => await UpdatePriceAndPositionSize(PortfolioOwner.UserId) ">@Localizer["UpdateSharePrice"]</button>
        </div>

        <br /><br />
    </EditForm>
</div>

@if (ShowResultMessage)
{
    <p>
        @UpdateResultMessage
    </p>
}


@code {

    [CascadingParameter] IModalService Modal { get; set; } = default!;

    private PortfolioStock _stockToUpdate = new();

    [Parameter]
    public PortfolioStock StockToUpdate
    {
        get => _stockToUpdate ?? new PortfolioStock();
        set => _stockToUpdate = value;
    }

    [Parameter]
    public User PortfolioOwner { get; set; }

    private string UpdateResultMessage { get; set; } = string.Empty;

    private bool _showResultMessage;

    public bool ShowResultMessage
    {
        get => _showResultMessage;
        set
        {
            if (_showResultMessage != value)
            {
                _showResultMessage = value;
                StateHasChanged();
            }
        }
    }


    private async Task UpdateStock(PortfolioStock stock, int userId)
    {
        var response = await PortfolioService.UpdateStock(stock, userId);
        UpdateResultMessage = response.Success ? "Update successful" : "Update failed";
        await DisplayResultMessage();
    }

    private async Task<bool> ConfirmDelete() => await ShowModal() ? true : false;
    

    private async Task DeleteStock(string stockToDelete, int userId)
    {
        if(await ConfirmDelete())
        {
            UpdateResultMessage = await PortfolioService.DeleteStock(stockToDelete, PortfolioOwner.UserId)
            ? $" Deleted {StockToUpdate.Ticker}" : "Deletion failed.";
            await DisplayResultMessage();
            StockToUpdate = new PortfolioStock();
        }
    }

    private async Task DisplayResultMessage()
    {
        // Display result message.
        ShowResultMessage = true;

        // Display it for 2 seconds.
        await Task.Delay(2000);

        // Hide message.
        ShowResultMessage = false;
    }

    private static string GetDisplayValue(Industry value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (EnumDisplayText)Attribute.GetCustomAttribute(field, typeof(EnumDisplayText));
        return attribute != null ? attribute.Text : value.ToString();
    }

    private async Task<bool> ShowModal()
    {
        var parameters = new ModalParameters()
            .Add(nameof(ConfirmAction.Message), $"Delete {StockToUpdate.Ticker}?");

        var confirmDeleteModal = Modal.Show<ConfirmAction>(Localizer["ConfirmAction"], parameters);
        var result = await confirmDeleteModal.Result;
        return result.Confirmed;
    }

    /// <summary>
    /// Determine CSS class based on stock performance.
    /// </summary>
    /// <returns></returns>
    private string DeterminePerformanceColor(decimal? performance)
    {
        if (performance is not null)
            return performance > 0 ? "color: green" : "color: red";

        return string.Empty;
    }

    public async Task UpdatePriceAndPositionSize(int userId)
    {
        // Rerender piechart if update was successful
        if (await PortfolioService.UpdatePriceAndPositionSize(userId))
            PortfolioService.OnPortfolioChanged(await PortfolioService.GetPortfolioStocks(userId));
    }
}
