@using PortfolioTrackerClient.Services.PortfolioService;
@using PortfolioTrackerShared.Models;
@using PortfolioTrackerShared.Other;

@inject IPortfolioService PortfolioService
@inject IStringLocalizer<Resource> Localizer

<div>
    <EditForm class="edit-form" Model="@StockToAdd" OnValidSubmit='async() => await AddStock(StockToAdd, PortfolioOwner.UserId)'>
        <DataAnnotationsValidator />
        <div class="flexbox-item">
            <label class="label" for="stockTicker">@Localizer["StockTicker"]:</label>
            <div>
                <InputText id="stockTicker" @bind-Value="StockToAdd.Ticker" />
                <ValidationMessage For="() => StockToAdd.Ticker" />
            </div>
        </div>

        <div class="flexbox-item">
            <label class="label" for="sharesOwned">@Localizer["SharesOwned"]: </label>
            <div>
                <InputNumber id="sharesOwned" @bind-Value="StockToAdd.SharesOwned" min="0" />
                <ValidationMessage For="() => StockToAdd.SharesOwned" />
            </div>
        </div>

        <div class="flexbox-item">
            <label class="label" for="positionSize">@Localizer["PositionSize"]: </label>
            <div>
                <InputNumber id="positionSize" @bind-Value="StockToAdd.PositionSize" min="0" />
                <ValidationMessage For="() => StockToAdd.PositionSize" />
            </div>
        </div>

        <div class="flexbox-item">
            <label class="label" for="buyinPrice">@Localizer["BuyInPrice"]: </label>
            <div>
                <InputNumber id="buyinPrice" @bind-Value="StockToAdd.BuyInPrice" min="0" />
                <ValidationMessage For="() => StockToAdd.BuyInPrice" />
            </div>
        </div>

        <div class="flexbox-item">
            <label class="label" for="industry">@Localizer["Industry"]: </label>
            <div>
                <InputSelect id="industry" @bind-Value="StockToAdd.Industry">
                    @foreach (Industry industry in Enum.GetValues(typeof(Industry)))
                    {
                        <option>@GetDisplayValue(industry)</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="flexbox-item">
            <label class="label" for="dividendYield">@Localizer["DividendYield"]: </label>
            <div>
                <InputNumber id="dividendYield" @bind-Value="StockToAdd.DividendYield" min="0" />
                <ValidationMessage For="() => StockToAdd.DividendYield" />
            </div>
        </div>


        <button style="margin-top: 15px" class="btn-secondary" type="submit">@Localizer["AddNewStock"]</button>
    </EditForm>
    <div />
</div>

@if (ShowResultMessage)
{
    <p class=@AddStockResultCss>
        @AddStockResultMessage
    </p>
}

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public User PortfolioOwner { get; set; } = new();

    private PortfolioStock _stockToAdd = new PortfolioStock();

    private PortfolioStock StockToAdd
    {
        get => _stockToAdd ?? new();
        set => _stockToAdd = value;
    }


    private string AddStockResultMessage { get; set; } = string.Empty;
    private string AddStockResultCss { get; set; } = string.Empty;

    private bool _showResultMessage;

    private bool ShowResultMessage
    {
        get => _showResultMessage;
        set
        {
            if (_showResultMessage != value)
            {
                _showResultMessage = value;
                StateHasChanged();
            }
        }
    }

    private async Task AddStock(PortfolioStock stock, int userId)
    {
        var addStockResponse = await PortfolioService.AddStock(stock, userId);

        AddStockResultMessage = addStockResponse.Success ?
            $"Added {addStockResponse.Data?.Ticker} to the portfolio" : "Addition failed";

        AddStockResultCss = addStockResponse.Success ? "add-stock-success" : "add-stock-fail";

        await DisplayResultMessage();
        await BlazoredModal.CloseAsync(ModalResult.Ok());

        StockToAdd = new PortfolioStock();
    }

    private async Task DisplayResultMessage()
    {
        // Display result message.
        ShowResultMessage = true;

        // Display it for 2 seconds.
        await Task.Delay(2000);

        // Hide message.
        ShowResultMessage = false;
    }

    private static string GetDisplayValue(Industry value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (EnumDisplayText)Attribute.GetCustomAttribute(field, typeof(EnumDisplayText));
        return attribute != null ? attribute.Text : value.ToString();
    }
}
